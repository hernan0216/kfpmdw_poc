import json

import kfp.dsl as _kfp_dsl
import kfp.components as _kfp_components

{# PIPELINE LIGHTWEIGHT COMPONENTS #}
{% for func in lightweight_components -%}
{{func}}
{% endfor -%}

{# DEFINE PIPELINE TASKS FROM FUNCTIONS #}
{%- for component in pipeline.components -%}
{% if docker_image != '' %}
{{ component.name }}_op = kfp.components.func_to_container_op({{ component.name }}, base_image='{{ component.base_image }}')
{% else %}
{{ compoment.name }}_op = kfp.components.func_to_container_op({{ component.name }})
{% endif %}
{% endfor -%}

{# DECLARE PIPELINE #}
@_kfp_dsl.pipeline(
   name='{{ pipeline.name }}',
   description='{{ pipeline.description }}'
)
def auto_generated_pipeline({%- for arg in pipeline.pps_names -%}
    {{ arg }}='{{ (pipeline.pps_values)[loop.index-1] }}'
    {%- if loop.index < pipeline.pps_values|length -%},
    {%- endif -%}
    {%- endfor -%}):
    {% for step in pipeline.components %}
    {{ step.name }}_task = {{ step.name }}_op({{ pipeline.pipeline_dependencies_task(step) }}.output).after({{ pipeline.pipeline_dependencies_task(step) }})
    {% endfor -%}

{# The script will deploy the pipeline if run manually #}
if __name__ == "__main__":
    pipeline_func = auto_generated_pipeline
    pipeline_filename = pipeline_func.__name__ + '.pipeline.tar.gz'
    import kfp.compiler as compiler
    compiler.Compiler().compile(pipeline_func, pipeline_filename)

    # Get or create an experiment and submit a pipeline run
    import kfp
    client = kfp.Client()
    experiment = client.create_experiment('{{ experiment_name }}')

    # Submit a pipeline run
    run_name = generate_run_name('{{ pipeline.name }}')
    run_result = client.run_pipeline(experiment.id, run_name, pipeline_filename, {})
